{"ast":null,"code":"var _jsxFileName = \"/Users/aamirp/programming/fullstack-open-2020/part2/phonebook/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport phonebookService from './services/phonebook';\nimport Filter from \"./components/Filter\";\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [notif, setNotif] = useState(null);\n  const [success, setSuccess] = useState(null);\n  useEffect(() => {\n    phonebookService.getAll().then(response => setPersons(response));\n  }, []); // Create a copy of the persons array that can be filtered if a search term is inputted\n\n  let new_persons = [...persons];\n\n  if (filter) {\n    new_persons = new_persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()));\n  }\n\n  const handleFilterChange = e => setFilter(e.target.value);\n\n  const handleNameChange = e => setNewName(e.target.value);\n\n  const handleNumberChange = e => setNewNumber(e.target.value);\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const duplicate = persons.filter(person => person.name === newName); //console.log(\"DUP:\", duplicate)\n\n    if (duplicate.length) {\n      const choice = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n\n      if (choice === true) {\n        let updatePerson = duplicate[0];\n        updatePerson.number = newNumber;\n        phonebookService.update(updatePerson).then(returnedPerson => {\n          setPersons(persons.map(person => person.id !== updatePerson.id ? person : returnedPerson));\n          setNotif(`Updated ${returnedPerson.name}`);\n          setSuccess(true);\n          setTimeout(() => {\n            setNotif(null);\n            setSuccess(null);\n          }, 5000);\n        });\n      }\n    } else {\n      const newPerson = {\n        name: newName,\n        number: newNumber\n      };\n      phonebookService.create(newPerson).then(response => {\n        setPersons(persons.concat(response));\n        console.log(\"Added: \", response);\n        setNotif(`Added ${response.name}`);\n        setSuccess(true);\n        setTimeout(() => {\n          setNotif(null);\n          setSuccess(null);\n        }, 5000);\n      });\n      setNewName(\"\");\n      setNewNumber(\"\");\n    }\n  };\n\n  const handleDelete = person => {\n    const result = window.confirm(`Delete ${person.name}`);\n\n    if (result === true) {\n      phonebookService.remove(person.id).then(response => console.log(\"DELETED\", person)).catch(error => {\n        setNotif(`Information of ${person.name} has already been removed from the server`);\n        setSuccess(false);\n        setTimeout(() => {\n          setNotif(null);\n          setSuccess(null);\n        }, 5000);\n      });\n      const updatedPersons = persons.filter(p => p.id !== person.id);\n      setPersons(updatedPersons);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, \"Phonebook\"), /*#__PURE__*/React.createElement(Notification, {\n    message: notif,\n    success: success,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Filter, {\n    filter: filter,\n    handleChange: handleFilterChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, \"add a new\"), /*#__PURE__*/React.createElement(PersonForm, {\n    newName: newName,\n    newNumber: newNumber,\n    handleNameChange: handleNameChange,\n    handleNumberChange: handleNumberChange,\n    handleFormSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, \"Numbers\"), /*#__PURE__*/React.createElement(Persons, {\n    persons: new_persons,\n    handleDelete: handleDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/aamirp/programming/fullstack-open-2020/part2/phonebook/src/App.js"],"names":["React","useState","useEffect","phonebookService","Filter","PersonForm","Persons","Notification","App","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","notif","setNotif","success","setSuccess","getAll","then","response","new_persons","person","name","toLowerCase","includes","handleFilterChange","e","target","value","handleNameChange","handleNumberChange","handleFormSubmit","event","preventDefault","duplicate","length","choice","window","confirm","updatePerson","number","update","returnedPerson","map","id","setTimeout","newPerson","create","concat","console","log","handleDelete","result","remove","catch","error","updatedPersons","p"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport phonebookService from './services/phonebook'\nimport Filter from \"./components/Filter\"\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ notif, setNotif ] = useState(null)\n  const [ success, setSuccess ] = useState(null)\n\n  useEffect(() => {\n    phonebookService.getAll()\n      .then(response => setPersons(response))\n  }, []);\n\n  // Create a copy of the persons array that can be filtered if a search term is inputted\n  let new_persons = [...persons]\n\n  if (filter) {\n    new_persons = new_persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase())) \n  }\n\n  const handleFilterChange = (e) => setFilter(e.target.value)\n\n  const handleNameChange = (e) => setNewName(e.target.value)\n\n  const handleNumberChange = (e) => setNewNumber(e.target.value)\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault()\n\n    const duplicate = persons.filter(person => person.name === newName)\n\n    //console.log(\"DUP:\", duplicate)\n    if (duplicate.length) {\n      const choice = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n\n      if (choice === true) {\n        let updatePerson = duplicate[0]\n        updatePerson.number = newNumber\n        phonebookService.update(updatePerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== updatePerson.id ? person:  returnedPerson))\n\n            setNotif(`Updated ${returnedPerson.name}`)\n            setSuccess(true)\n  \n            setTimeout(() => {\n              setNotif(null)\n              setSuccess(null)\n            }, 5000)\n          })\n      }\n    }\n\n    else {\n      const newPerson = { \n        name: newName, \n        number: newNumber \n      }\n\n      phonebookService.create(newPerson)\n        .then(response => {\n          setPersons(persons.concat(response))\n          console.log(\"Added: \", response)\n          setNotif(`Added ${response.name}`)\n          setSuccess(true)\n\n          setTimeout(() => {\n            setNotif(null)\n            setSuccess(null)\n          }, 5000)\n        })\n\n      setNewName(\"\")\n      setNewNumber(\"\")\n    }\n  }\n\n  const handleDelete = (person) => {\n   const result = window.confirm(`Delete ${person.name}`)\n\n    if (result === true) {\n      phonebookService.remove(person.id)\n        .then(response => console.log(\"DELETED\", person))\n        .catch(error => {\n          setNotif(`Information of ${person.name} has already been removed from the server`)\n          setSuccess(false)\n\n          setTimeout(() => {\n            setNotif(null)\n            setSuccess(null)\n          }, 5000)\n        })\n\n      const updatedPersons = persons.filter(p => p.id !== person.id)\n      setPersons(updatedPersons)\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notif} success={success}/>\n\n      <Filter filter={filter} handleChange={handleFilterChange} />\n\n      <h2>add a new</h2>\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        handleFormSubmit={handleFormSubmit}\n      />\n\n      <h2>Numbers</h2>\n      <Persons persons={new_persons} handleDelete={handleDelete}/>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}